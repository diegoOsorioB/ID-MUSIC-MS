name: Deploy JARs to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CHANGED_PROJECTS: "Clientes Inventarios modulo-jwt paquetes Servicios"
      START_PORT: 8080
      END_PORT: 8086

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Verify Java version
        run: java -version

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_DNS }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} "echo 'SSH connection successful'"

      - name: Build projects
        run: |
          for proj in $CHANGED_PROJECTS; do
            echo "=== Building $proj ==="
            if [ -d "$proj" ]; then
              cd "$proj"
              if [ -f "pom.xml" ]; then
                mvn clean package -DskipTests
              elif [ -f "build.gradle" ]; then
                chmod +x ./gradlew
                ./gradlew build -x test
              else
                echo "WARNING: No build file found for $proj"
              fi
              cd ..
            else
              echo "WARNING: Directory $proj not found"
            fi
          done

      - name: Verify JARs were built
        run: |
          echo "=== Verifying JAR files ==="
          for proj in $CHANGED_PROJECTS; do
            echo "Checking $proj..."
            if ls $proj/target/*.jar 1> /dev/null 2>&1; then
              echo "✓ Found JAR in target/: $(ls $proj/target/*.jar)"
            elif ls $proj/build/libs/*.jar 1> /dev/null 2>&1; then
              echo "✓ Found JAR in build/libs/: $(ls $proj/build/libs/*.jar)"
            else
              echo "❌ ERROR: No JAR file found for $proj"
              echo "Directory contents:"
              find $proj -type f -name "*.jar" || echo "No JAR files found"
              exit 1
            fi
          done

      - name: Deploy projects to EC2
        run: |
          set -e
          PORT=$START_PORT
          
          for proj in $CHANGED_PROJECTS; do
            echo "=== Deploying $proj on port $PORT ==="

            # Find the JAR file
            JAR_FILE=""
            if ls $GITHUB_WORKSPACE/$proj/target/*.jar 1> /dev/null 2>&1; then
              JAR_FILE=$(ls $GITHUB_WORKSPACE/$proj/target/*.jar | head -1)
            elif ls $GITHUB_WORKSPACE/$proj/build/libs/*.jar 1> /dev/null 2>&1; then
              JAR_FILE=$(ls $GITHUB_WORKSPACE/$proj/build/libs/*.jar | head -1)
            fi

            if [ -z "$JAR_FILE" ]; then
              echo "ERROR: No JAR file found for $proj"
              exit 1
            fi

            echo "Deploying JAR: $JAR_FILE"

            # Create backup on EC2
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} "
              mkdir -p /home/ec2-user/$proj /home/ec2-user/$proj/backup
              if ls /home/ec2-user/$proj/*.jar 1> /dev/null 2>&1; then
                echo 'Creating backup of existing JAR'
                mv /home/ec2-user/$proj/*.jar /home/ec2-user/$proj/backup/
              fi
            "

            # Upload new JAR
            scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no "$JAR_FILE" ec2-user@${{ secrets.EC2_DNS }}:/home/ec2-user/$proj/

            # Deploy with health check and rollback
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} "
              set -e
              cd /home/ec2-user/$proj
              
              # Stop existing process
              echo 'Stopping existing process...'
              pkill -f \"java.*$proj\" || true
              sleep 2
              
              # Start new application
              echo 'Starting application...'
              nohup java -jar *.jar --server.port=$PORT > $proj.log 2>&1 &
              APP_PID=\$!
              echo \"Started with PID: \$APP_PID\"
              
              # Wait and check health
              sleep 15
              
              if ss -tuln | grep -q \":$PORT\"; then
                echo \"✅ $proj successfully started on port $PORT\"
                echo \"Application logs:\"
                tail -20 $proj.log || echo 'No logs yet'
              else
                echo \"❌ $proj failed to start on port $PORT, performing rollback...\"
                kill \$APP_PID 2>/dev/null || true
                sleep 2
                
                if ls backup/*.jar 1> /dev/null 2>&1; then
                  echo 'Restoring backup...'
                  rm -f *.jar
                  mv backup/*.jar .
                  nohup java -jar *.jar --server.port=$PORT > $proj.log 2>&1 &
                  sleep 10
                  
                  if ss -tuln | grep -q \":$PORT\"; then
                    echo \"✅ Rollback successful for $proj\"
                  else
                    echo \"❌ Rollback failed for $proj\"
                    exit 1
                  fi
                else
                  echo 'No backup available for rollback'
                  exit 1
                fi
              fi
            "

            # Increment port for next project
            PORT=$((PORT + 1))
            if [ $PORT -gt $END_PORT ]; then
              PORT=$START_PORT
            fi
            echo ""
          done

      - name: Verify deployments
        run: |
          echo "=== Final deployment status ==="
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} "
            echo 'Running processes:'
            ps aux | grep java | grep -v grep || echo 'No Java processes found'
            echo ''
            echo 'Open ports:'
            ss -tuln | grep 'LISTEN' | grep -E ':(808[0-6])' || echo 'No deployment ports found'
          "
