name: Deploy JARs to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CHANGED_PROJECTS: "Clientes Inventarios modulo-jwt paquetes Servicios"
      START_PORT: 8080
      END_PORT: 8086

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_DNS }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} "echo 'SSH OK'"

      - name: Build projects
        run: |
          for proj in $CHANGED_PROJECTS; do
            echo "=== Building $proj ==="
            cd $proj
            if [ -f "pom.xml" ]; then
              mvn clean package -DskipTests
            elif [ -f "build.gradle" ]; then
              ./gradlew build -x test
            fi
            cd ..
          done

      - name: Deploy projects to EC2
        run: |
          PORT=$START_PORT
          for proj in $CHANGED_PROJECTS; do
            echo "=== Deploying $proj on port $PORT ==="

            # Crear carpetas y backup en EC2
            ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} << 'EOF'
mkdir -p /home/ec2-user/$proj /home/ec2-user/$proj/backup || true
if ls /home/ec2-user/$proj/*.jar 1> /dev/null 2>&1; then
  mv /home/ec2-user/$proj/*.jar /home/ec2-user/$proj/backup/
fi
EOF

            # Subir JAR
            if [ -f $GITHUB_WORKSPACE/$proj/target/*.jar ]; then
              scp -o StrictHostKeyChecking=no $GITHUB_WORKSPACE/$proj/target/*.jar ec2-user@${{ secrets.EC2_DNS }}:/home/ec2-user/$proj/
            elif [ -f $GITHUB_WORKSPACE/$proj/build/libs/*.jar ]; then
              scp -o StrictHostKeyChecking=no $GITHUB_WORKSPACE/$proj/build/libs/*.jar ec2-user@${{ secrets.EC2_DNS }}:/home/ec2-user/$proj/
            fi

            # Ejecutar despliegue en EC2 con rollback
            ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} << EOF
pkill -f $proj || true
nohup java -jar /home/ec2-user/$proj/*.jar --server.port=$PORT > /home/ec2-user/$proj/$proj.log 2>&1 &
sleep 10

if ! ss -tuln | grep -q ":$PORT"; then
  echo "ERROR: $proj failed to start on port $PORT, rollback..."
  pkill -f $proj || true
  if ls /home/ec2-user/$proj/backup/*.jar 1> /dev/null 2>&1; then
    mv /home/ec2-user/$proj/backup/*.jar /home/ec2-user/$proj/
    nohup java -jar /home/ec2-user/$proj/*.jar --server.port=$PORT > /home/ec2-user/$proj/$proj.log 2>&1 &
  fi
fi
EOF

            # Incrementar puerto para el siguiente proyecto
            PORT=$((PORT+1))
            if [ $PORT -gt $END_PORT ]; then
              PORT=$START_PORT
            fi

          done
