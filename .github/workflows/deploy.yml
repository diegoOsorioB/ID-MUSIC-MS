name: Deploy JARs to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CHANGED_PROJECTS: "Clientes Inventarios modulo-jwt paquetes Servicios"
      START_PORT: 8080
      END_PORT: 8086

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_DNS }} >> ~/.ssh/known_hosts

      - name: Disable EC2 Internal Firewall
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} "
            echo '=== Disabling internal firewall ==='
            sudo iptables -F 2>/dev/null || true
            sudo iptables -X 2>/dev/null || true
            sudo iptables -t nat -F 2>/dev/null || true
            sudo iptables -t nat -X 2>/dev/null || true
            sudo iptables -P INPUT ACCEPT 2>/dev/null || true
            sudo iptables -P FORWARD ACCEPT 2>/dev/null || true
            sudo iptables -P OUTPUT ACCEPT 2>/dev/null || true
            echo 'Firewall disabled'
          "

      - name: Build projects
        run: |
          for proj in $CHANGED_PROJECTS; do
            echo "=== Building $proj ==="
            if [ -d "$proj" ]; then
              cd "$proj"
              if [ -f "pom.xml" ]; then
                mvn clean package -DskipTests
              elif [ -f "build.gradle" ]; then
                chmod +x ./gradlew
                ./gradlew build -x test
              fi
              cd ..
            fi
          done

      - name: Deploy projects to EC2
        run: |
          set -e
          PORT=$START_PORT
          
          for proj in $CHANGED_PROJECTS; do
            echo "=== Deploying $proj on port $PORT ==="

            # Find JAR file
            JAR_FILE=""
            if ls $GITHUB_WORKSPACE/$proj/target/*.jar 1> /dev/null 2>&1; then
              JAR_FILE=$(ls $GITHUB_WORKSPACE/$proj/target/*.jar | head -1)
            fi

            echo "Deploying JAR: $JAR_FILE"

            # Create directories
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} "
              mkdir -p /home/ec2-user/$proj /home/ec2-user/$proj/backup
              if ls /home/ec2-user/$proj/*.jar 1> /dev/null 2>&1; then
                mv /home/ec2-user/$proj/*.jar /home/ec2-user/$proj/backup/
              fi
            "

            # Upload JAR
            scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no "$JAR_FILE" ec2-user@${{ secrets.EC2_DNS }}:/home/ec2-user/$proj/

            # Deploy application
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} "
              cd /home/ec2-user/$proj
              
              # Stop any existing process
              echo 'Stopping any existing process...'
              pkill -f 'java.*$proj' 2>/dev/null || true
              sleep 3
              
              # Kill any process using the port
              PORT_PID=\$(lsof -ti:$PORT 2>/dev/null || echo '')
              if [ ! -z \"\$PORT_PID\" ]; then
                echo \"Killing process \$PORT_PID on port $PORT\"
                kill -9 \$PORT_PID 2>/dev/null || true
                sleep 2
              fi
              
              # Start application
              echo 'Starting application...'
              nohup java -jar *.jar --server.port=$PORT --server.address=0.0.0.0 > $proj.log 2>&1 &
              APP_PID=\$!
              echo \"Application started with PID: \$APP_PID\"
              
              # Wait and monitor
              echo 'Waiting for application to start...'
              for i in {1..30}; do
                if ! ps -p \$APP_PID > /dev/null 2>&1; then
                  echo \"❌ Process died immediately!\"
                  echo \"=== APPLICATION LOGS ===\"
                  cat $proj.log
                  echo \"=== END LOGS ===\"
                  exit 1
                fi
                
                if ss -tuln | grep -q \":$PORT\"; then
                  echo \"✅ SUCCESS: Port $PORT is now listening!\"
                  break
                fi
                
                if [ \$i -eq 30 ]; then
                  echo \"❌ TIMEOUT: Port $PORT still not listening after 30 seconds\"
                  echo \"Process status: \$(ps -p \$APP_PID >/dev/null && echo 'RUNNING' || echo 'DEAD')\"
                  echo \"=== LAST 50 LINES OF LOGS ===\"
                  tail -50 $proj.log
                  echo \"=== END DIAGNOSTICS ===\"
                  break
                fi
                
                echo \"Waiting... (\$i/30)\"
                sleep 1
              done
            " || echo "⚠️  Deployment for $proj had issues, continuing..."

            PORT=$((PORT + 1))
            if [ $PORT -gt $END_PORT ]; then
              PORT=$START_PORT
            fi
            echo ""
          done

      - name: Final comprehensive check
        run: |
          echo "=== Final deployment status ==="
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_DNS }} "
            echo '=== Running Java Processes ==='
            ps aux | grep java | grep -v grep || echo 'No Java processes found'
            
            echo ''
            echo '=== Open Ports ==='
            ss -tuln | grep 'LISTEN' | grep -E ':(808[0-6])' || echo 'No deployment ports found'
            
            echo ''
            echo '=== Application Status ==='
            for proj in $CHANGED_PROJECTS; do
              echo \"--- \$proj ---\"
              if [ -f \"/home/ec2-user/\$proj/\$proj.log\" ]; then
                echo 'Last 10 lines of log:'
                tail -10 \"/home/ec2-user/\$proj/\$proj.log\"
                echo ''
              else
                echo 'No log file found'
              fi
            done
            
            echo '=== Disk Usage ==='
            df -h /home/ec2-user/
            
            echo '=== Memory Usage ==='
            free -h
          "
