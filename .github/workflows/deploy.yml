name: Deploy Proyectos Monorepo

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v3

      - name: Detectar proyectos modificados
        id: cambios
        run: |
          echo "CHANGED_PROJECTS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | awk -F/ '{print $1}' | sort -u)" >> $GITHUB_ENV
          echo "Proyectos cambiados: $CHANGED_PROJECTS"

      - name: Compilar proyectos modificados
        run: |
          for proj in $CHANGED_PROJECTS; do
            echo "== Compilando $proj =="
            if [ -f "$proj/pom.xml" ]; then
              mvn -f $proj/pom.xml -B clean package -DskipTests
            elif [ -f "$proj/build.gradle" ]; then
              cd $proj && ./gradlew build -x test && cd ..
            else
              echo "No se detectó build system en $proj"
            fi
          done

      - name: Build y deploy por proyecto
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_DNS }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            for proj in $CHANGED_PROJECTS; do
              echo "=== Desplegando $proj ==="
              mkdir -p /home/ec2-user/$proj
              mkdir -p /home/ec2-user/$proj/backup

              # Backup del JAR actual
              if ls /home/ec2-user/$proj/*.jar 1> /dev/null 2>&1; then
                mv /home/ec2-user/$proj/*.jar /home/ec2-user/$proj/backup/
              fi

              # Subir nuevo JAR (Maven o Gradle)
              if [ -f $GITHUB_WORKSPACE/$proj/target/*.jar ]; then
                scp -o StrictHostKeyChecking=no $GITHUB_WORKSPACE/$proj/target/*.jar ec2-user@${{ secrets.EC2_DNS }}:/home/ec2-user/$proj/
              elif [ -f $GITHUB_WORKSPACE/$proj/build/libs/*.jar ]; then
                scp -o StrictHostKeyChecking=no $GITHUB_WORKSPACE/$proj/build/libs/*.jar ec2-user@${{ secrets.EC2_DNS }}:/home/ec2-user/$proj/
              fi

              # Detener app anterior
              pkill -f "$proj" || true

              # Lanzar nuevo JAR
              nohup java -jar /home/ec2-user/$proj/*.jar > /home/ec2-user/$proj/$proj.log 2>&1 &
              sleep 10

              # Verificar puertos 8080-8086
              PORT_OK=false
              for port in {8080..8086}; do
                if ss -tuln | grep -q ":$port"; then
                  PORT_OK=true
                  break
                fi
              done

              if [ "$PORT_OK" = false ]; then
                echo "ERROR: $proj no arrancó en puertos 8080-8086, haciendo rollback..."
                if ls /home/ec2-user/$proj/backup/*.jar 1> /dev/null 2>&1; then
                  mv /home/ec2-user/$proj/backup/*.jar /home/ec2-user/$proj/
                  nohup java -jar /home/ec2-user/$proj/*.jar > /home/ec2-user/$proj/$proj.log 2>&1 &
                fi
              fi
            done
